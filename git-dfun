#!/bin/sh

SHOW_PATH=""

function fGitOk()
{
    # echo "::::::::::::::::::::1Q84-FGITOK::::::::::::::::::::"
    # unset t_std t_err t_ret
    # eval "$( ($1) 2> >(t_err=$(cat); declare -p t_err) > >(t_std=$(cat); declare -p t_std); t_ret=$?; declare -p t_ret )"

    # 以下的也可以，不过感觉很罗嗦
    exec 3>&1
    t_err=$($1 2>&1 >/dev/null)
    t_std=$({ taotaotmp=$($1 2>&1 1>&3-) ;} 3>&1)
    t_ret=$?
    exec 3>&-

    if [ "$2" == "l" ]; then
        echo "******************************"
        echo "fGitOk agr:\t「$1」"

        if [ "$3" == "std" ]; then
            echo "------------------------------"
            echo "1q84 T_STD MESSAGE IS \"${t_std}\"."
        fi

        echo "------------------------------"
        echo "1q85 T_ERR MESSAGE IS \"${t_err}\"."
        echo "------------------------------"
        echo "1q86 T_RET MESSAGE IS \"${t_ret}\"."

    fi

    errorQueryMsg=""
    if [ -z $4 ]; then
        errorQueryMsg="fatal:"
    else
        errorQueryMsg="$4"
    fi

    INDEX_ERR=""
    echo "$t_err" | grep -q "$errorQueryMsg" && INDEX_ERR=1 || INDEX_ERR=0

    if [ "$3" == "l" ]; then
        echo "------------------------------"
        echo "INDEX_ERR = $INDEX_ERR"
        echo "=============================="
    fi

    # 当然了, 这里除了用来校验是否为 commit 之外还负责校验合法路径.
    # 好吧那就涉及到用户的输入了.
    # 下面用的【^git diff head】表示查询是否以【git diff head】开头
    # grep -q 表示静默输出, 如果搜索到结果, 不会输出
    INDEX_PATH=""
    echo "$1" | grep -q "^git diff head" && INDEX_PATH="yes" || INDEX_PATH="no"
    # echo "INDEX_PATH is $INDEX_PATH"

    if [ "$INDEX_PATH" == "yes" ]; then
        # 这里是校验路径
        if [ "$t_ret" -eq 0 ] && [ "$INDEX_ERR" == 0 ]; then
            return 0;
        else
            return 1;
        fi
    else
        # 这里的意思是说不是校验路径
        # 这里就是说成功了(也即结果值【$t_ret】为0)，并且错误信息里面找不到字段【$errorQueryMsg】，那就意味着我们成功了
        # 按照他们的惯例，也返回【0】表示成功。(话说0是假的意思吧 - -b 额，好吧，惯例...)
        # 其实似乎有些多余，如果【$t_ret】为0，那应该就没有错误信息了吧？那当然没什么可找的
        # 最关键一点需要校验输入值为 commit.
        if [ "$t_ret" -eq 0 ] && [ "$INDEX_ERR" == 0 ] && [ "$t_std" == "commit" ]; then
            return 0;
        else
            return 1;
        fi
    fi

}

# if [[ -z $1 ]]; then
if [ -z "$1" ]; then
    MAINCMD="git diff --name-status";
else
    MAINCMD="$1";
fi

if [ -z "$2" ]; then
    SHA1=" HEAD^";
    SHA2=" HEAD";
else
    ############################################################
    # 这里主要讨论的是在第二个参数存在的情况下，第二参数是否为有效SHA值
    # 使用【git cat-file -t】得到值的类型
    CMD_ARG_2_SHA="git cat-file -t $2"
    fGitOk "$CMD_ARG_2_SHA"
    RESULT_ARG_2_SHA=$?
    ############################################################

    if [ $RESULT_ARG_2_SHA -eq 0 ]; then
        # 在这里的话第二个参数是可以用的SHA值
        if [ -z $3 ]; then
            SHA1=" $2^";
            SHA2=" $2";
        else
            ############################################################
            # 这里主要讨论的是在第三个参数存在的情况下，第三参数是否为有效SHA值
            # CMD_ARG_3_SHA="git show $3..head"
            CMD_ARG_3_SHA="git cat-file -t $3"
            fGitOk "$CMD_ARG_3_SHA" # "l" "std"
            RESULT_ARG_3_SHA=$?
            ############################################################
            if [ $RESULT_ARG_3_SHA -eq 0 ]; then
                SHA1=" $2";
                SHA2=" $3";
            else
                # 如果是错误结果的话，或者出现或者是预计的错误结果的话
                # 也就是说第三参数是无效的SHA参数，那么就有可能是表示路径
                SHA1=" $2^";
                SHA2=" $2";

                ############################################################
                # 这里讨论的是第三个参数是否是我们需要有效的路径
                # 既然上面的是无效的
                CMD_ARG_3_PATH="git diff head $3"
                fGitOk "$CMD_ARG_3_PATH" # "l" "std"
                RESULT_ARG_3_PATH=$?
                ############################################################
                if [ $RESULT_ARG_3_PATH -eq 0 ]; then
                    SHOW_PATH=" $3"
                else
                    # 如果是错误结果的话，或者出现或者是预计的错误结果的话
                    # 也就是说第三参数是无效的路径
                    SHOW_PATH=""
                fi
                ############################################################
            fi
        fi
    else
        # 如果是错误结果的话，或者出现或者是预计的错误结果的话
        # 也就是说第二参数是无效的SHA参数
        # 这个时候我们可以试一下它是不是某个有效的路径
        CMD_ARG_2_PATH="git diff head $2"
        fGitOk "$CMD_ARG_2_PATH"
        RESULT_ARG_2_PATH=$?
        if [ $RESULT_ARG_2_PATH -eq 0 ]; then
            # 第二个参数是有效路径
            SHOW_PATH=" $2"
        else
            # 如果是错误结果的话，或者出现或者是预计的错误结果的话
            # 也就是说第二参数是未知参数, 那就直接忽略吧
            SHOW_PATH=""
        fi

        # 不管怎么说, 第二参数不是有效 COMMIT SHA 值的话, 那么一定有以下设定
        SHA1=" HEAD^";
        SHA2=" HEAD";
    fi
    ############################################################

fi

LASTCMD=""
# 保存第四位开始的参数
LESTP=${@:4:$#};
if [ ! "$LESTP" == "" ]; then
    LASTCMD=" $LESTP"
fi

fcmd="$MAINCMD""$SHA1""$SHA2""$SHOW_PATH""$LASTCMD";
echo "============================================================"
echo "$fcmd";
echo "------------------------------------------------------------"
if [ ! "$MAINCMD" == "git diff --name-status" ] && [ ! "$MAINCMD" == "git diff --name-only" ]; then
    normalfcmd="git diff --name-status""$SHA1""$SHA2""$SHOW_PATH""$LASTCMD";

    # echo "$normalfcmd"

    exec 3>&1
    t_err=$((normalfcmd) 2>&1 >/dev/null)
    t_std=$({ taotaotmp=$($normalfcmd 2>&1 1>&3-); } 3>&1)
    t_ret=$?
    exec 3>&-

    echo "$t_std"
    echo "============================================================"
fi

$fcmd
